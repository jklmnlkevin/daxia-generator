package ${basePackage}.service;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import ${basePackage}.dao.${Model}DAO;
import ${basePackage}.model.${Model};
import ${basePackage}.dto.${Model}DTO;
import com.daxia.core.support.Page;
import com.daxia.core.util.BeanMapper;

/**
 * Service层，类要加@Service标识
 * 一般都是由service层操作数据库，
 * 并且，只有save, update, delete等开头的方法，才有新增修改删除数据库表的权限，
 * 其它的方法名只有查询的权限，这是事务管理，具体哪些方法名可以指定这种权限，是在applicationContext.xml文件的txAdvice定义处配置。
 * @author Kewen.Zhu
 *
 */
@Service
public class ${Model}Service {
	
	@Autowired
	private ${Model}DAO ${model}DAO;
	
	/**
	 * 根据model的查询条件和分页条件查找记录
	 * @param model
	 * @param page
	 * @return
	 */
	public List<${Model}DTO> find(${Model}DTO model, Page page) {
		List<${Model}> models = ${model}DAO.find(model, page);
		List<${Model}DTO> dtos = toDTOs(models);
		return dtos;
	}
	
	public Long create(${Model} model) {
		return ${model}DAO.create(model);
	}
	
	public ${Model}DTO load(Long id) {
	    ${Model} model = ${model}DAO.load(id);
	    return toDTO(model);
    }

	/**
	 * 这个方法会把model所有的字段都赋给model，然后更新model。
	 * @param model
	 */
	public void updateAllFields(${Model}DTO dto) {
		${Model} model = ${model}DAO.load(dto.getId());
		toModel(model, dto);
		${model}DAO.update(model);
    }

	public void deleteByIds(Long[] ids) {
		if (ids != null) {
			for (Long id : ids) {
				${model}DAO.deleteById(id);
			}
		}
    }
	
	public void deleteById(Long id) {
		this.deleteByIds(new Long[] {id});
	}

	public ${Model}DTO findOne(${Model}DTO query) {
		${Model} model = ${model}DAO.findOne(query);
		return toDTO(model);
	}
	
	private List<${Model}DTO> toDTOs(List<${Model}> models) {
		if (CollectionUtils.isEmpty(models)) {
			return new ArrayList<${Model}DTO>(0);
		}
		List<${Model}DTO> dtos = new ArrayList<${Model}DTO>(models.size());
		for (${Model} model : models) {
	        ${Model}DTO dto = toDTO(model);
	        dtos.add(dto);
        }
	    return dtos;
    }
    
    private ${Model}DTO toDTO(${Model} model) {
		if (model == null) {
			return null;
		}
		${Model}DTO dto = BeanMapper.map(model, ${Model}DTO.class);
		
		return dto;
	}
	
	private void toModel(${Model} model, ${Model}DTO dto) {
		BeanMapper.copy(dto, model);
    }
	
	@SuppressWarnings("unused")
	private List<${Model}> toModels(List<${Model}DTO> dtos) {
		if (CollectionUtils.isEmpty(dtos)) {
			return new ArrayList<${Model}>(0);
		}
		List<${Model}> models = new ArrayList<${Model}>(dtos.size());
		for (${Model}DTO dto : dtos) {
	        ${Model} model = new ${Model}();
	        toModel(model, dto);
	        models.add(model);
        }
		return models;
	}
}
